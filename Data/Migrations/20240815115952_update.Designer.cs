// <auto-generated />
using System;
using Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(VdnhContext))]
    [Migration("20240815115952_update")]
    partial class update
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BaseRoleBaseUser", b =>
                {
                    b.Property<long>("RolesId")
                        .HasColumnType("bigint");

                    b.Property<long>("UsersId")
                        .HasColumnType("bigint");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("BaseRoleBaseUser");
                });

            modelBuilder.Entity("Core.Models.Entities.System.BaseContractor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean")
                        .HasColumnName("is_system");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("re_contractors");
                });

            modelBuilder.Entity("Core.Models.Entities.System.BaseFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("DataTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("data_type_id");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update");

                    b.Property<string>("ElementId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("element_id");

                    b.Property<long?>("FileTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("file_type_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool?>("IsMain")
                        .HasColumnType("boolean")
                        .HasColumnName("is_main");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean")
                        .HasColumnName("is_system");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update");

                    b.HasKey("Id");

                    b.HasIndex("DataTypeId");

                    b.HasIndex("FileTypeId");

                    b.ToTable("re_files");
                });

            modelBuilder.Entity("Core.Models.Entities.System.BasePhisycalPerson", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birth_day");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean")
                        .HasColumnName("is_system");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text")
                        .HasColumnName("patronymic");

                    b.Property<bool?>("Sex")
                        .HasColumnType("boolean")
                        .HasColumnName("sex");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update");

                    b.HasKey("Id");

                    b.ToTable("re_phisycal_persons");
                });

            modelBuilder.Entity("Core.Models.Entities.System.BaseRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update");

                    b.HasKey("Id");

                    b.ToTable("dir_roles");
                });

            modelBuilder.Entity("Core.Models.Entities.System.BaseUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("ContractorId")
                        .HasColumnType("bigint")
                        .HasColumnName("contractor_id");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean")
                        .HasColumnName("is_system");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("login");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.ToTable("re_users");
                });

            modelBuilder.Entity("Core.Models.Entities.System.BaseUserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("un_users_roles");
                });

            modelBuilder.Entity("Core.Models.Entities.System.DataType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<char?>("IsPath")
                        .HasColumnType("character(1)")
                        .HasColumnName("is_path");

                    b.Property<bool?>("IsSystem")
                        .HasColumnType("boolean")
                        .HasColumnName("is_system");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Path")
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update");

                    b.HasKey("Id");

                    b.ToTable("sys_data_types");
                });

            modelBuilder.Entity("Core.Models.Entities.System.FieldType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean")
                        .HasColumnName("is_system");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update");

                    b.HasKey("Id");

                    b.ToTable("sys_field_types");
                });

            modelBuilder.Entity("Core.Models.Entities.System.FileType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean")
                        .HasColumnName("is_system");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("sys_file_type");
                });

            modelBuilder.Entity("Core.Models.Entities.System.FormView", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update");

                    b.Property<int?>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("group_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean")
                        .HasColumnName("is_system");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<string>("Platform")
                        .HasColumnType("text")
                        .HasColumnName("platform_id");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("sys_formviews");
                });

            modelBuilder.Entity("Core.Models.Entities.System.Param", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<bool>("CanEdit")
                        .HasColumnType("boolean")
                        .HasColumnName("can_edit");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update");

                    b.Property<long?>("FieldTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("field_type_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsGlobal")
                        .HasColumnType("boolean")
                        .HasColumnName("is_global");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean")
                        .HasColumnName("is_system");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("FieldTypeId");

                    b.ToTable("sys_params");
                });

            modelBuilder.Entity("Core.Models.Entities.System.RoleFormView", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update");

                    b.Property<int>("FormViewId")
                        .HasColumnType("integer")
                        .HasColumnName("formview_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update");

                    b.HasKey("Id");

                    b.ToTable("un_roles_formviews");
                });

            modelBuilder.Entity("Data.Entities.About", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("BackgroundId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<long?>("MainId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<long?>("TitleId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update");

                    b.HasKey("Id");

                    b.HasIndex("BackgroundId");

                    b.HasIndex("MainId");

                    b.HasIndex("TitleId");

                    b.ToTable("di_about");
                });

            modelBuilder.Entity("Data.Entities.Header", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update");

                    b.HasKey("Id");

                    b.ToTable("di_header");
                });

            modelBuilder.Entity("Data.Entities.Horisontal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AboutId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update");

                    b.Property<long?>("ImgId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long?>("SecondLevelId")
                        .HasColumnType("bigint")
                        .HasColumnName("SecondLevelId");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update");

                    b.Property<double?>("X")
                        .HasColumnType("double precision")
                        .HasColumnName("x");

                    b.Property<double?>("Y")
                        .HasColumnType("double precision")
                        .HasColumnName("y");

                    b.HasKey("Id");

                    b.HasIndex("AboutId");

                    b.HasIndex("ImgId");

                    b.HasIndex("SecondLevelId");

                    b.ToTable("di_horisontal");
                });

            modelBuilder.Entity("Data.Entities.Image", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AboutId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Link")
                        .HasColumnType("text")
                        .HasColumnName("link");

                    b.Property<string>("Main")
                        .HasColumnType("text")
                        .HasColumnName("main");

                    b.Property<string>("Preview")
                        .HasColumnType("text")
                        .HasColumnName("preview");

                    b.Property<int?>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update");

                    b.HasKey("Id");

                    b.HasIndex("AboutId");

                    b.ToTable("di_image");
                });

            modelBuilder.Entity("Data.Entities.Interval", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update");

                    b.Property<decimal?>("End")
                        .HasColumnType("numeric")
                        .HasColumnName("end");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<decimal?>("Start")
                        .HasColumnType("numeric")
                        .HasColumnName("start");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update");

                    b.HasKey("Id");

                    b.ToTable("di_interval");
                });

            modelBuilder.Entity("Data.Entities.Main", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update");

                    b.Property<long?>("ImgId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update");

                    b.HasKey("Id");

                    b.HasIndex("ImgId");

                    b.ToTable("di_main");
                });

            modelBuilder.Entity("Data.Entities.Map", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("BackgroundId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update");

                    b.HasKey("Id");

                    b.HasIndex("BackgroundId");

                    b.ToTable("di_map");
                });

            modelBuilder.Entity("Data.Entities.SecondLevel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("BackgroundId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update");

                    b.Property<long?>("HeaderId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<long?>("MapId")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<long?>("ThirdLevelBackgroundId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update");

                    b.HasKey("Id");

                    b.HasIndex("BackgroundId");

                    b.HasIndex("HeaderId");

                    b.HasIndex("MapId");

                    b.HasIndex("ThirdLevelBackgroundId");

                    b.ToTable("di_secondLevel");
                });

            modelBuilder.Entity("Data.Entities.Title", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update");

                    b.Property<long?>("ImgId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Number")
                        .HasColumnType("text")
                        .HasColumnName("number");

                    b.Property<string>("TitleName")
                        .HasColumnType("text")
                        .HasColumnName("titleName");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update");

                    b.HasKey("Id");

                    b.HasIndex("ImgId");

                    b.ToTable("di_title");
                });

            modelBuilder.Entity("Data.Entities.Vertical", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update");

                    b.Property<long?>("GroupId")
                        .HasColumnType("bigint")
                        .HasColumnName("groupId");

                    b.Property<long?>("HeaderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("IntervalId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<long?>("MapId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PeriodId")
                        .HasColumnType("bigint")
                        .HasColumnName("periodId");

                    b.Property<long?>("SecondLevelId")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update");

                    b.HasKey("Id");

                    b.HasIndex("HeaderId");

                    b.HasIndex("IntervalId");

                    b.HasIndex("MapId");

                    b.HasIndex("SecondLevelId");

                    b.ToTable("di_vertical");
                });

            modelBuilder.Entity("BaseRoleBaseUser", b =>
                {
                    b.HasOne("Core.Models.Entities.System.BaseRole", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Entities.System.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Models.Entities.System.BaseContractor", b =>
                {
                    b.HasOne("Core.Models.Entities.System.BaseContractor", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Core.Models.Entities.System.BaseFile", b =>
                {
                    b.HasOne("Core.Models.Entities.System.DataType", "DataType")
                        .WithMany()
                        .HasForeignKey("DataTypeId");

                    b.HasOne("Core.Models.Entities.System.FileType", "FileType")
                        .WithMany()
                        .HasForeignKey("FileTypeId");

                    b.Navigation("DataType");

                    b.Navigation("FileType");
                });

            modelBuilder.Entity("Core.Models.Entities.System.BasePhisycalPerson", b =>
                {
                    b.HasOne("Core.Models.Entities.System.BaseContractor", "Contractor")
                        .WithOne("PhisycalPerson")
                        .HasForeignKey("Core.Models.Entities.System.BasePhisycalPerson", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contractor");
                });

            modelBuilder.Entity("Core.Models.Entities.System.BaseUser", b =>
                {
                    b.HasOne("Core.Models.Entities.System.BaseContractor", "Contractor")
                        .WithMany()
                        .HasForeignKey("ContractorId");

                    b.Navigation("Contractor");
                });

            modelBuilder.Entity("Core.Models.Entities.System.BaseUserRole", b =>
                {
                    b.HasOne("Core.Models.Entities.System.BaseRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Entities.System.BaseUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Models.Entities.System.FileType", b =>
                {
                    b.HasOne("Core.Models.Entities.System.FileType", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Core.Models.Entities.System.FormView", b =>
                {
                    b.HasOne("Core.Models.Entities.System.FormView", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Core.Models.Entities.System.Param", b =>
                {
                    b.HasOne("Core.Models.Entities.System.FieldType", "FieldType")
                        .WithMany()
                        .HasForeignKey("FieldTypeId");

                    b.Navigation("FieldType");
                });

            modelBuilder.Entity("Data.Entities.About", b =>
                {
                    b.HasOne("Data.Entities.Image", "Background")
                        .WithMany()
                        .HasForeignKey("BackgroundId");

                    b.HasOne("Data.Entities.Main", "Main")
                        .WithMany()
                        .HasForeignKey("MainId");

                    b.HasOne("Data.Entities.Title", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId");

                    b.Navigation("Background");

                    b.Navigation("Main");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("Data.Entities.Horisontal", b =>
                {
                    b.HasOne("Data.Entities.About", "About")
                        .WithMany()
                        .HasForeignKey("AboutId");

                    b.HasOne("Data.Entities.Image", "Img")
                        .WithMany()
                        .HasForeignKey("ImgId");

                    b.HasOne("Data.Entities.SecondLevel", null)
                        .WithMany("Sources")
                        .HasForeignKey("SecondLevelId");

                    b.Navigation("About");

                    b.Navigation("Img");
                });

            modelBuilder.Entity("Data.Entities.Image", b =>
                {
                    b.HasOne("Data.Entities.About", null)
                        .WithMany("Images")
                        .HasForeignKey("AboutId");
                });

            modelBuilder.Entity("Data.Entities.Main", b =>
                {
                    b.HasOne("Data.Entities.Image", "Img")
                        .WithMany()
                        .HasForeignKey("ImgId");

                    b.Navigation("Img");
                });

            modelBuilder.Entity("Data.Entities.Map", b =>
                {
                    b.HasOne("Data.Entities.Image", "Background")
                        .WithMany()
                        .HasForeignKey("BackgroundId");

                    b.Navigation("Background");
                });

            modelBuilder.Entity("Data.Entities.SecondLevel", b =>
                {
                    b.HasOne("Data.Entities.Image", "Background")
                        .WithMany()
                        .HasForeignKey("BackgroundId");

                    b.HasOne("Data.Entities.Header", "Header")
                        .WithMany()
                        .HasForeignKey("HeaderId");

                    b.HasOne("Data.Entities.Map", "Map")
                        .WithMany()
                        .HasForeignKey("MapId");

                    b.HasOne("Data.Entities.Image", "ThirdLevelBackground")
                        .WithMany()
                        .HasForeignKey("ThirdLevelBackgroundId");

                    b.Navigation("Background");

                    b.Navigation("Header");

                    b.Navigation("Map");

                    b.Navigation("ThirdLevelBackground");
                });

            modelBuilder.Entity("Data.Entities.Title", b =>
                {
                    b.HasOne("Data.Entities.Image", "Img")
                        .WithMany()
                        .HasForeignKey("ImgId");

                    b.Navigation("Img");
                });

            modelBuilder.Entity("Data.Entities.Vertical", b =>
                {
                    b.HasOne("Data.Entities.Header", "Header")
                        .WithMany()
                        .HasForeignKey("HeaderId");

                    b.HasOne("Data.Entities.Interval", "Interval")
                        .WithMany()
                        .HasForeignKey("IntervalId");

                    b.HasOne("Data.Entities.Map", "Map")
                        .WithMany()
                        .HasForeignKey("MapId");

                    b.HasOne("Data.Entities.SecondLevel", "SecondLevel")
                        .WithMany()
                        .HasForeignKey("SecondLevelId");

                    b.Navigation("Header");

                    b.Navigation("Interval");

                    b.Navigation("Map");

                    b.Navigation("SecondLevel");
                });

            modelBuilder.Entity("Core.Models.Entities.System.BaseContractor", b =>
                {
                    b.Navigation("PhisycalPerson");
                });

            modelBuilder.Entity("Core.Models.Entities.System.BaseRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Core.Models.Entities.System.BaseUser", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Data.Entities.About", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("Data.Entities.SecondLevel", b =>
                {
                    b.Navigation("Sources");
                });
#pragma warning restore 612, 618
        }
    }
}
